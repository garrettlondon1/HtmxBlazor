@using System.Text.Json;

@page "/"

<PageTitle>Home</PageTitle>

@code {
    private List<DocumentComment> annotations = new();

    private int RandomUser = (new Random()).Next(100000);

    private long UserName = (new Random()).NextInt64();
    protected override async Task OnInitializedAsync()
    {
        annotations = Database.Annotations.ToList();
    }
}

<div class="space-y-4">
    <h1 class="text-3xl font-bold">
        Adobe PDF Embed SDK Document Collaboration
    </h1>
    <p>Use Razor SSR to implement real-time document collaboration with Adobe PDF Embed SDK</p>

    <div id="adobe-dc-view" class="h-screen"></div>
</div>






<script src="https://acrobatservices.adobe.com/view-sdk/viewer.js" suppress-error="BL9992"></script>
<script type="text/javascript" suppress-error="BL9992">

    var profile = {
        userProfile: {
            name: 'Test User @RandomUser',
            firstName: 'User @RandomUser',
            lastName: 'User',
            email: 'test@adobe.com'
        }
    };

    var globalAdobeDCView = null;
    var globalAnnotationManager = null;
    var previewFilePromise = null;

    var writerPdfOptions = {
        embedMode: "FULL_WINDOW",
        defaultViewMode: "FIT_WIDTH",
        showDownloadPDF: false,
        showPrintPDF: true,
        showAnnotationTools: true,
        enableAnnotationAPIs: true,
        includePDFAnnotations: false,
        enableFormFilling: false
    };

    var annotationManagerConfig = {
        showToolbar: true,
        showCommentsPanel: true,
        showToolsOnTextSelection: true,
        downloadWithAnnotations: false,
    };

    var eventOptions = {
        listenOn: [
            "ANNOTATION_ADDED",
            "ANNOTATION_UPDATED",
            "ANNOTATION_DELETED",
        ]
    };

    async function GoToAnnotation(annotationId) {
        if (globalAnnotationManager) {
            globalAnnotationManager.selectAnnotation(annotationId);
        }
    }


    async function StartAnnotationMode(annotationMode) {
        if (globalAnnotationManager) {
            globalAnnotationManager.startAnnotationMode(annotationMode, options);
        }
    }

    async function GetCurrentPageNumber() {
        if (globalAdobeDCView) {
            var apis = await previewFilePromise.getAPIs();

            return apis.getCurrentPage();
        }
    }

    async function GoToLocation(page) {
        if (globalAdobeDCView) {
            var apis = await previewFilePromise.getAPIs();

            apis.gotoLocation(page);
        }
    }

    async function DeleteAnnotation(annotationId) {
        const filter = {
            annotationIds: [ annotationId ]
        };

        if (globalAnnotationManager) {
            globalAnnotationManager.deleteAnnotations(filter);
        }
    }

    let list_of_annotations = @((MarkupString)JsonSerializer.Serialize(annotations));

    async function LoadViewer() {
        globalAdobeDCView = new AdobeDC.View({ clientId: "00df8c410539467aa3a57dcfa5548ae1", divId: "adobe-dc-view" });

        previewFilePromise = await globalAdobeDCView.previewFile({
            content: { location: { url: "https://acrobatservices.adobe.com/view-sdk-demo/PDFs/Bodea Brochure.pdf" } },
            metaData: { fileName: "Bodea Brochure.pdf", id: "123445" }
        }, writerPdfOptions);

        globalAnnotationManager = await previewFilePromise.getAnnotationManager();
        await globalAnnotationManager.setConfig(annotationManagerConfig);

        if (list_of_annotations != null && list_of_annotations.length > 0) {
            try {
                await globalAnnotationManager.addAnnotations(list_of_annotations);
            } catch (error) {
                console.error("Error adding annotations:", error);
            }
        }

        globalAdobeDCView.registerCallback(
            AdobeDC.View.Enum.CallbackType.GET_USER_PROFILE_API,
            function () {
                return new Promise((resolve, reject) => {
                    resolve({
                        code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,
                        data: profile
                    });
                });
            }
        );

        globalAnnotationManager.registerEventListener(async function (event) {
            await HandleAnnotationEvent(event.data.id, event);
            console.log(event);
        }, eventOptions);

        
    }

    async function HandleAnnotationEvent(annotationId, event) {
        if (event.type === "ANNOTATION_ADDED") {
            await AddAnnotation(event);
        } else if (event.type === "ANNOTATION_UPDATED") {
            await UpdateAnnotation(annotationId, event);
        } else if (event.type === "ANNOTATION_DELETED") {
            await DeleteAnnotation(annotationId);
        }
    }

    async function AddAnnotation(event) {
        // Assuming event.data contains the annotation data
        const response = await fetch('/api/annotations', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(
                event.data
            )
        });

        if (!response.ok) {
            throw new Error('Failed to add annotation');
        }

        return await response.json();
    }

    async function UpdateAnnotation(annotationId, event) {
        // Assuming event.data contains the updated annotation data
        const response = await fetch(`/api/annotations/${annotationId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(event.data)
        });

        if (!response.ok) {
            throw new Error('Failed to update annotation');
        }

        return await response.json();
    }

    async function DeleteAnnotation(annotationId) {
        const response = await fetch(`/api/annotations/${annotationId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('Failed to delete annotation');
        }

        return await response.json();
    }

    document.addEventListener("adobe_dc_view_sdk.ready", LoadViewer);
</script>